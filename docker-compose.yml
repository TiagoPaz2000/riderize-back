version: '3.9'
services:
  postgres:
    image: postgres:10.3
    restart: always
    container_name: postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "riderize"]
      timeout: 10s
      retries: 5

  adminer:
    image: adminer
    ports:
      - 8080:8080

  app:
    build: ./
    restart: always
    platform: linux/amd64
    container_name: app_back
    command: start
    ports:
      - '3001:${API_PORT}'
    volumes:
      - ./src:/app/src
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?schema=${POSTGRES_DB}
      - API_PORT=${API_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASS=${REDIS_PASS}
    healthcheck:
      test: ["CMD", "lsof", "-t", "-i:${API_PORT}"]
      timeout: 10s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  redis:
    image: redis:6.2-alpine
    restart: always
    ports:
      - '${REDIS_PORT}:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASS}
    volumes: 
      - cache:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 10s
      retries: 5

volumes:
  cache:
    driver: local
  postgres: